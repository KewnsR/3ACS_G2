@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <style>
        /* Fixed sticky header and layout issues */
        .app-container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background-color: #f8f9fa;
        }

        .scrollable-container {
            position: absolute;
            left: 256px;
            top: 80px;
            width: calc(100% - 256px);
            height: calc(100vh - 80px);
            overflow-y: auto;
        }

        .content-area {
            padding: 20px;
            width: 100%;
        }

        .header-section {
            position: fixed;
            top: 0;
            left: 256px;
            right: 0;
            z-index: 1000;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            padding: 20px;
            height: 80px;
            display: flex;
            align-items: center;
        }

        .dashboard-card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
            height: 100%;
            cursor: pointer;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
            }

        .chart-container {
            position: relative;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 1rem;
            min-height: 300px;
            width: 100%;
        }

        #employeeGrowthChart {
            width: 100% !important;
            height: 300px !important;
        }

        .time-range-btn.active {
            background-color: #0d6efd;
            color: white;
        }

        @@media (max-width: 768px) {
            .dashboard-card .card-text.display-6 {
                font-size: 1.75rem;
            }

            .chart-container {
                min-height: 250px;
            }

            .btn-group .btn {
                font-size: 0.75rem;
            }

            #employeeGrowthChart {
                height: 250px !important;
            }
        }
    </style>
}

<div class="app-container">
    <div class="header-section d-flex justify-content-between align-items-center">
        <h1 class="h2 mb-0">Dashboard Overview</h1>
        <div class="d-flex align-items-center" style="gap: 8px;">
            <!-- Date Range Buttons -->
            <form method="post" asp-page-handler="ThisWeek">
                <button type="submit" class="btn btn-sm time-range-btn @(Model.TimeRange == "week" ? "active" : "btn-outline-secondary")">
                    <i class="bi bi-calendar-week"></i> This Week
                </button>
            </form>
            <form method="post" asp-page-handler="ThisMonth">
                <button type="submit" class="btn btn-sm time-range-btn @(Model.TimeRange == "month" ? "active" : "btn-outline-secondary")">
                    <i class="bi bi-calendar-month"></i> This Month
                </button>
            </form>
            <form method="post" asp-page-handler="6Months">
                <button type="submit" class="btn btn-sm time-range-btn @(Model.TimeRange == "6months" ? "active" : "btn-outline-secondary")">
                    <i class="bi bi-calendar-range"></i> 6 Months
                </button>
            </form>
        </div>
    </div>

    <div class="scrollable-container">
        <div class="content-area">
            <!-- Summary Cards -->
            <div class="row mb-4 g-4">
                <div class="col-md-6 col-lg-4">
                    <a href="/employees" class="text-decoration-none">
                        <div class="card dashboard-card text-white bg-primary h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title">TOTAL EMPLOYEES</h6>
                                        <p class="card-text display-6" data-card="total-employees">@Model.TotalEmployees</p>
                                        <p class="card-text"><small>+@Model.EmployeeChangeFromLastPeriod from last @(Model.TimeRange == "week" ? "week" : Model.TimeRange == "month" ? "month" : "period")</small></p>
                                    </div>
                                    <i class="bi bi-people-fill fs-1 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <div class="col-md-6 col-lg-4">
                    <a href="/departments" class="text-decoration-none">
                        <div class="card dashboard-card text-white bg-success h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title">DEPARTMENTS</h6>
                                        <p class="card-text display-6">@Model.TotalDepartments</p>
                                        <p class="card-text"><small>+@Model.NewDepartments new departments</small></p>
                                    </div>
                                    <i class="bi bi-building fs-1 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <div class="col-md-6 col-lg-4">
                    <a href="/attendance" class="text-decoration-none">
                        <div class="card dashboard-card text-white bg-info h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title">ATTENDANCE RATE</h6>
                                        <p class="card-text display-6">@Model.AttendanceRate.ToString("0.0")%</p>
                                        <p class="card-text"><small>+@Model.AttendanceChangeFromLastPeriod.ToString("0.0")% from last @(Model.TimeRange == "week" ? "week" : Model.TimeRange == "month" ? "month" : "period")</small></p>
                                    </div>
                                    <i class="bi bi-clipboard2-check fs-1 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- Employee Growth Chart -->
            <div class="row g-4 mb-4">
                <div class="col-12">
                    <div class="card shadow-sm h-100">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">Employee Growth (Based on Hire Dates)</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container">
                                <canvas id="employeeGrowthChart"
                                        data-labels='@Json.Serialize(Model.EmployeeGrowthLabels ?? new List<string>())'
                                        data-values='@Json.Serialize(Model.EmployeeGrowthCounts ?? new List<int>())'>
                                </canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global chart reference
        let employeeGrowthChart = null;

        function initializeChart() {
            const ctx = document.getElementById('employeeGrowthChart');
            if (!ctx) {
                console.error('Chart canvas element not found!');
                return;
            }

            try {
                // Get initial data from data attributes with fallback to empty arrays
                const labels = JSON.parse(ctx.dataset.labels || '[]');
                const values = JSON.parse(ctx.dataset.values || '[]');

                console.log('Initial chart data:', { labels, values });

                // Destroy existing chart if it exists
                if (employeeGrowthChart) {
                    employeeGrowthChart.destroy();
                }

                // Create new chart instance
                employeeGrowthChart = new Chart(ctx.getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Total Employees',
                            data: values,
                            borderColor: '#0d6efd',
                            backgroundColor: 'rgba(13, 110, 253, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            pointRadius: 4,
                            pointBackgroundColor: '#0d6efd',
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return `Employees: ${context.raw}`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: false,
                                suggestedMin: 0,
                                grid: { display: false },
                                ticks: { precision: 0 }
                            },
                            x: {
                                grid: { display: false },
                                ticks: {
                                    autoSkip: false,
                                    maxRotation: 45,
                                    minRotation: 45
                                }
                            }
                        },
                        animation: {
                            duration: 500,
                            easing: 'easeOutQuart'
                        }
                    }
                });

                console.log('Chart initialized successfully');
            } catch (error) {
                console.error('Error initializing chart:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeChart();

            // Handle all time range button clicks
            document.querySelectorAll('form[method="post"]').forEach(form => {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const button = this.querySelector('button');
                    if (!button) return;

                    // Show loading state
                    const originalHtml = button.innerHTML;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
                    button.disabled = true;

                    try {
                        console.log(`Fetching data for: ${this.action}`);

                        const formData = new FormData(this);
                        const response = await fetch(this.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
                                'X-Requested-With': 'XMLHttpRequest',
                                'Accept': 'application/json'
                            }
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();
                        console.log('Data received:', result);

                        if (!result.success) {
                            throw new Error(result.error || 'Error in response');
                        }

                        if (!result.employeeGrowthLabels || !result.employeeGrowthCounts) {
                            throw new Error('Invalid data format received from server');
                        }

                        // Update chart data with smooth transition
                        employeeGrowthChart.data.labels = result.employeeGrowthLabels;
                        employeeGrowthChart.data.datasets[0].data = result.employeeGrowthCounts;
                        employeeGrowthChart.update();

                        // Update summary cards
                        if (result.totalEmployees) {
                            const totalEmployeesEl = document.querySelector('[data-card="total-employees"]');
                            if (totalEmployeesEl) {
                                totalEmployeesEl.textContent = result.totalEmployees;
                                const changeText = totalEmployeesEl.nextElementSibling.querySelector('small');
                                if (changeText) {
                                    const periodText = result.timeRange === "week" ? "week" :
                                                     result.timeRange === "month" ? "month" : "period";
                                    changeText.textContent = `+${result.employeeChangeFromLastPeriod} from last ${periodText}`;
                                }
                            }
                        }

                        // Update active button state
                        document.querySelectorAll('.time-range-btn').forEach(btn => {
                            btn.classList.remove('active', 'btn-primary');
                            btn.classList.add('btn-outline-secondary');
                        });
                        button.classList.remove('btn-outline-secondary');
                        button.classList.add('active', 'btn-primary');

                    } catch (error) {
                        console.error('Error fetching chart data:', error);
                        alert('Error loading data: ' + error.message);
                    } finally {
                        // Restore button state
                        button.innerHTML = originalHtml;
                        button.disabled = false;
                    }
                });
            });
        });

        // Make chart responsive to window resize
        window.addEventListener('resize', function() {
            if (employeeGrowthChart) {
                employeeGrowthChart.resize();
            }
        });
    </script>
}