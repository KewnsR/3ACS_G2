@page "/Attendance/RecordAttendance"
@model HumanRepProj.Pages.Attendance.RecordAttendanceModel
@{
    ViewData["Title"] = "Record Attendance";
    Layout = "_Layout";
}

@section Styles {
<style>
    .form-control-sm { font-size: 0.875rem; }
    .card-body { padding: 1rem; }
    .video-container {
        max-width: 640px;
        margin: 0 auto;
        text-align: center;
    }
    #status {
        font-weight: bold;
        margin-top: 1rem;
    }
</style>
}

<div class="scrollable-container">
    <div class="d-flex justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2 mb-0">Record Attendance</h1>
    </div>

    <div class="video-container mt-4">
        <video id="webcam" autoplay playsinline width="100%" style="max-height:400px;"></video>
        <canvas id="canvas" style="display:none;"></canvas>
        
        <div class="mt-3">
            <button id="captureBtn" class="btn btn-primary" disabled>Capture Face</button>
            <p id="status" class="text-muted mt-2"></p>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jsqr @@1.4.0/dist/jsQR.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js "></script>

<script>
const video = document.getElementById('webcam');
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const captureBtn = document.getElementById('captureBtn');
const statusText = document.getElementById('status');

let employeeId = null;

// Initialize Webcam
navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
    .then(stream => {
        video.srcObject = stream;
    })
    .catch(err => {
        alert("Camera access denied or not supported.");
        console.error(err);
    });

// QR Scanning Loop
function scanQR() {
    if (video.readyState === video.HAVE_ENOUGH_DATA) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const code = jsQR(imageData.data, imageData.width, imageData.height);

        if (code) {
            employeeId = code.data;
            statusText.innerText = `✅ QR Scanned: Employee ID ${employeeId}`;
            captureBtn.disabled = false;
        }
    }
    requestAnimationFrame(scanQR);
}

video.addEventListener('play', () => {
    requestAnimationFrame(scanQR);
});

// Capture Face & Send to YOLO API
captureBtn.addEventListener('click', async () => {
    statusText.innerText = "📸 Capturing face...";
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    const image = canvas.toDataURL('image/jpeg', 0.8); // Base64 image

    try {
        // Step 1: Verify face using YOLO backend
        const response = await axios.post('/api/attendance/verify-face', {
            employeeId,
            image
        });

        if (response.data.match) {
            statusText.innerText = "👤 Face verified!";
            // Step 2: Log attendance
            await logAttendance(employeeId);
        } else {
            statusText.innerText = "❌ Face does not match employee.";
        }
    } catch (err) {
        statusText.innerText = "⚠️ Error verifying face.";
        console.error(err);
    }
});

// Log attendance to database
async function logAttendance(empId) {
    try {
        const res = await fetch('/api/attendance/log', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ employeeId: empId })
        });

        if (res.ok) {
            statusText.innerText = "✅ Attendance recorded successfully!";
            captureBtn.disabled = true;
        } else {
            statusText.innerText = "❌ Failed to record attendance.";
        }
    } catch (err) {
        statusText.innerText = "⚠️ Network error.";
    }
}
</script>
}